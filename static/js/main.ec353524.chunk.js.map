{"version":3,"sources":["Taskbar/logo.svg","Taskbar/Taskbar.styles.js","Taskbar/Taskbar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","MainContainer","styled","div","_templateObject","Clock","nav","_templateObject2","_templateObject3","Time","span","_templateObject4","button","_templateObject5","App","_useState","useState","time","Date","_useState2","Object","slicedToArray","dataTime","setTime","useEffect","setInterval","react_default","a","createElement","src","logo","className","alt","toLocaleTimeString","href","target","rel","Taskbar_Taskbar","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,04CCGxC,IAAMC,EAAgBC,IAAOC,IAAVC,KAuBXC,GAXOH,IAAOI,IAAVC,KAWIL,IAAOC,IAAVK,MAQLC,EAAOP,IAAOQ,KAAVC,QAOKT,IAAOU,OAAVC,qBCVCC,SAzBH,WAAM,IAAAC,EACYC,mBAAS,CAAEC,KAAM,IAAIC,OADjCC,EAAAC,OAAAC,EAAA,EAAAD,CAAAL,EAAA,GACTO,EADSH,EAAA,GACCI,EADDJ,EAAA,GAIRF,EAASK,EAATL,KAWN,OALFO,oBAAU,WACRC,YAAY,kBAJYF,EAAQ,CAAEN,KAAM,IAAIC,QAIX,MAEhC,IAGDQ,EAAAC,EAAAC,cAAC3B,EAAD,KACEyB,EAAAC,EAAAC,cAAA,OAAKC,IAAKC,IAAMC,UAAU,WAAWC,IAAI,SACzCN,EAAAC,EAAAC,cAACvB,EAAD,KACCqB,EAAAC,EAAAC,cAACnB,EAAD,KAAOQ,EAAKgB,0BCGJnB,0LAtBX,OACEY,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAAA,UAAQG,UAAU,cAEhBL,EAAAC,EAAAC,cAAA,iBACOF,EAAAC,EAAAC,cAAA,0BADP,wBAGAF,EAAAC,EAAAC,cAAA,KACEG,UAAU,WACVG,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,gBASFV,EAAAC,EAAAC,cAACS,EAAD,cAlBUC,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnB,EAAAC,EAAAC,cAACkB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ec353524.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import styled from \"styled-components\";\r\n\r\n\r\nconst MainContainer = styled.div`\r\n  width: 100%;\r\n  height: 42px;\r\n  display: flex;\r\n  background: rgba(22, 28, 22, 0.8);\r\n  border: 1px solid #aaa;\r\n  box-sizing: border-box;\r\n  justify-content: space-between;\r\n  flex-direction: row;\r\n  align-items: center;\r\n`;\r\n\r\nconst NavBar = styled.nav`\r\n  width: 100vw;\r\n  background-color: darkgrey;\r\n  height: 80px;\r\n  color: white;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  font-family -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto;\r\n  `;\r\n\r\n  const Clock = styled.div`\r\n    width: 1fr;\r\n    height: 42px;\r\n    color: #fff;\r\n    justify-content: center;\r\n    align-items: center;\r\n  `;\r\n\r\n  const Time = styled.span`\r\n    font-size: 15px;\r\n    color: white;\r\n    justify-content: center;\r\n    align-items: center;\r\n    `;\r\n\r\n  const Button = styled.button`\r\n    margin-top: 10px;\r\n    width: 100px;\r\n    height: 40px;\r\n    border-radius: 18.5px;\r\n    background-color: darkgray;\r\n  `;\r\n\r\n\r\n  export {\r\n      Clock, \r\n      MainContainer,\r\n      NavBar,\r\n      Time, \r\n      Button\r\n  }","import React, { useEffect, useState }  from \"react\";\r\nimport { MainContainer, Clock, Time } from './Taskbar.styles';\r\nimport logo from './logo.svg';\r\nimport './Taskbar.css';\r\n\r\n\r\nconst App = () => {\r\n  const [dataTime, setTime] = useState({ time: new Date() })\r\n  // const [dataBorder, setBorder] = useState({ border: false })\r\n  // const { border } = dataBorder;\r\n  const { time } = dataTime\r\n\r\n  \r\n  const currentTime = () => setTime({ time: new Date() });\r\n  // const toggleDate = () => setBorder({ border: !border });\r\n  \r\n  useEffect(() => {\r\n    setInterval(() => currentTime(), 1000);\r\n  \r\n  }, []);\r\n\r\n    return( \r\n    <MainContainer>\r\n      <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n      <Clock>\r\n       <Time>{time.toLocaleTimeString()}</Time>\r\n        </Clock>\r\n    </MainContainer>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","import React, { Component } from 'react';\nimport Taskbar from './Taskbar/Taskbar';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          \n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n        <Taskbar/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}